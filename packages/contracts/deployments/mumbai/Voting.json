{
  "address": "0xFCAEaBD08D9D5465066ce4e4e3Ec561B1c0e5CF9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedProofVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "usedNullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "AlreadyVoteCasted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unknownProofVerifier",
          "type": "address"
        }
      ],
      "name": "UnknownProofVerifier",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "identityHash",
          "type": "bytes32"
        }
      ],
      "name": "handleRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "hashesVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedProofVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yesVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe32c39d478fa3f023287c43d642882c9cd87a5bfc31671d390683f5330901600",
  "receipt": {
    "to": null,
    "from": "0x67BE2C36e75B7439ffc2DCb99dBdF4fbB2455930",
    "contractAddress": "0xFCAEaBD08D9D5465066ce4e4e3Ec561B1c0e5CF9",
    "transactionIndex": 19,
    "gasUsed": "507091",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000008000000000000000000000000000000020800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000080000000000000400000000000000000000000000004000000000000000000001000000000100000000000000000000100000000000000000000000000000000000000000000000000000000000002000000000100000",
    "blockHash": "0xf7fcd3a50c6d759cf47c5a52a9e97e3f0075f16fe36c53bee0425ee6e21393ba",
    "transactionHash": "0xe32c39d478fa3f023287c43d642882c9cd87a5bfc31671d390683f5330901600",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 34314625,
        "transactionHash": "0xe32c39d478fa3f023287c43d642882c9cd87a5bfc31671d390683f5330901600",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000067be2c36e75b7439ffc2dcb99dbdf4fbb2455930",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003629c4f7c75fd0000000000000000000000000000000000000000000000004a61c40632fb130b0000000000000000000000000000000000000000000005f87e398f0fe852aa6f0000000000000000000000000000000000000000000000004a5e6169e37e9d0e0000000000000000000000000000000000000000000005f87e3cf1ac37cf206c",
        "logIndex": 392,
        "blockHash": "0xf7fcd3a50c6d759cf47c5a52a9e97e3f0075f16fe36c53bee0425ee6e21393ba"
      }
    ],
    "blockNumber": 34314625,
    "cumulativeGasUsed": "16126516",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85",
    "0x3FA9F5A2bF41a7F0836fE97d011C81DFEb4AeB81"
  ],
  "numDeployments": 1,
  "solcInputHash": "026d4dbf5fcb938d49c1a2fc5ce9d6bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedProofVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"usedNullifierHash\",\"type\":\"bytes32\"}],\"name\":\"AlreadyVoteCasted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unknownProofVerifier\",\"type\":\"address\"}],\"name\":\"UnknownProofVerifier\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"identityHash\",\"type\":\"bytes32\"}],\"name\":\"handleRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashesVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedProofVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yesVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleRelay(bytes,bytes32,bytes32)\":{\"details\":\"ensure only trusted ProofVerifierRelayer are allowed to invoke this function\",\"params\":{\"data\":\"abi encoded data specific to business logic\",\"identityHash\":\"a proof that proves identity so that one identity is not used multiple times\",\"nullifierHash\":\"a proof that proves  membership so that one membership is not used multiple times\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"UnknownProofVerifier(address)\":[{\"notice\":\"Error when a call is made from not trusted ProofVerifierRelayer\"}]},\"kind\":\"user\",\"methods\":{\"handleRelay(bytes,bytes32,bytes32)\":{\"notice\":\"handles relay calls from ProofVerifierRelayer after proof verification\"},\"trustedProofVerifier()\":{\"notice\":\"address of trusted ProofVerifierRelayer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Testing/Voting.sol\":\"Voting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ProofRelayHandler/IProofRelayHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Proof Relay Handler\\n/// @author Mihirsinh Parmar <mihirsinh@curvelabs.eu> <https://github.com/codebuster22>\\ninterface IProofRelayHandler {\\n    /// @notice handles relay calls from ProofVerifierRelayer after proof verification\\n    /// @dev ensure only trusted ProofVerifierRelayer are allowed to invoke this function\\n    /// @param data abi encoded data specific to business logic\\n    /// @param nullifierHash a proof that proves  membership so that one membership is not used multiple times\\n    /// @param identityHash a proof that proves identity so that one identity is not used multiple times\\n    function handleRelay(\\n        bytes memory data,\\n        bytes32 nullifierHash,\\n        bytes32 identityHash\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa450878f23f1bcd8fba2db9f8c0718e7a69f67f022c82b7f13d072b9fc6b2a37\",\"license\":\"MIT\"},\"contracts/ProofRelayHandler/ProofRelayHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IProofRelayHandler} from \\\"./IProofRelayHandler.sol\\\";\\n\\n/// @title Proof Relay Handler\\n/// @author Mihirsinh Parmar <mihirsinh@curvelabs.eu> <https://github.com/codebuster22>\\nabstract contract ProofRelayHandler is IProofRelayHandler {\\n    /// @notice address of trusted ProofVerifierRelayer\\n    /// @return address of trusted ProofVerifierRelayer\\n    address public trustedProofVerifier;\\n\\n    /// @notice Error when a call is made from not trusted ProofVerifierRelayer\\n    error UnknownProofVerifier(address _unknownProofVerifier);\\n\\n    constructor (address _trustedProofVerifier) {\\n        trustedProofVerifier = _trustedProofVerifier;\\n    }\\n\\n    /// @notice internal function that checks if the call is made by trusted ProofVerifierRelayer\\n    /// @dev if call is made by untrusted ProofVerifierRelayer, throws error UnknownProofVerifier\\n    function _ensureRelayedFromTrustedVerifier() internal view {\\n        // an optimistic trust needs to be made on trusted verifier\\n        if (!(trustedProofVerifier == msg.sender)) {\\n            revert UnknownProofVerifier(msg.sender);\\n        }\\n    }\\n}\",\"keccak256\":\"0x57c8735e134242e93a65baddcc2c8edc8dea49a6084022c87b3a4d1a165d3407\",\"license\":\"MIT\"},\"contracts/Testing/Voting.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ProofRelayHandler} from \\\"../ProofRelayHandler/ProofRelayHandler.sol\\\";\\n\\ncontract Voting is ProofRelayHandler {\\n    address public tokenAddress;\\n    uint256 public yesVotes;\\n    uint256 public noVotes;\\n    mapping(bytes32 => bool) public hashesVoted;\\n    error AlreadyVoteCasted(bytes32 usedNullifierHash);\\n\\n    constructor(\\n        address _tokenAddress,\\n        address _trustedProofVerifier\\n    ) ProofRelayHandler(_trustedProofVerifier) {\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    function handleRelay(\\n        bytes memory data,\\n        bytes32 nullifierHash,\\n        bytes32 identityHash\\n    ) public virtual {\\n        // ensure correctly relayed from trusted verifier\\n        _ensureRelayedFromTrustedVerifier();\\n        if(hashesVoted[nullifierHash]) {\\n            revert AlreadyVoteCasted(nullifierHash);\\n        }\\n        hashesVoted[nullifierHash] = true;\\n        _votePrivately(data);\\n    }\\n\\n    function _votePrivately(bytes memory data) internal {\\n        bool vote = abi.decode(data, (bool));\\n        if (vote) {\\n            yesVotes++;\\n        } else {\\n            noVotes++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65e681bc5055b3e893149c55634a633a5e98d77e4af2f905ccc0675bfabb22a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516108c03803806108c08339818101604052810190610032919061011f565b80806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081519050610119816100f3565b92915050565b60008060408385031215610136576101356100bc565b5b60006101448582860161010a565b92505060206101558582860161010a565b9150509250929050565b6107528061016e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063648f914c1461006757806371f898f3146100975780639d76ea58146100b3578063b5b47f42146100d1578063bf21a264146100ef578063fb286c651461010d575b600080fd5b610081600480360381019061007c919061037a565b61012b565b60405161008e91906103c2565b60405180910390f35b6100b160048036038101906100ac9190610523565b61014b565b005b6100bb6101f0565b6040516100c891906105d3565b60405180910390f35b6100d9610216565b6040516100e69190610607565b60405180910390f35b6100f761021c565b60405161010491906105d3565b60405180910390f35b610115610240565b6040516101229190610607565b60405180910390f35b60046020528060005260406000206000915054906101000a900460ff1681565b610153610246565b6004600083815260200190815260200160002060009054906101000a900460ff16156101b657816040517ffe80a91e0000000000000000000000000000000000000000000000000000000081526004016101ad9190610631565b60405180910390fd5b60016004600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506101eb836102d8565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102d657336040517f473751350000000000000000000000000000000000000000000000000000000081526004016102cd91906105d3565b60405180910390fd5b565b6000818060200190518101906102ee9190610678565b905080156103135760026000815480929190610309906106d4565b919050555061032c565b60036000815480929190610326906106d4565b91905055505b5050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61035781610344565b811461036257600080fd5b50565b6000813590506103748161034e565b92915050565b6000602082840312156103905761038f61033a565b5b600061039e84828501610365565b91505092915050565b60008115159050919050565b6103bc816103a7565b82525050565b60006020820190506103d760008301846103b3565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610430826103e7565b810181811067ffffffffffffffff8211171561044f5761044e6103f8565b5b80604052505050565b6000610462610330565b905061046e8282610427565b919050565b600067ffffffffffffffff82111561048e5761048d6103f8565b5b610497826103e7565b9050602081019050919050565b82818337600083830152505050565b60006104c66104c184610473565b610458565b9050828152602081018484840111156104e2576104e16103e2565b5b6104ed8482856104a4565b509392505050565b600082601f83011261050a576105096103dd565b5b813561051a8482602086016104b3565b91505092915050565b60008060006060848603121561053c5761053b61033a565b5b600084013567ffffffffffffffff81111561055a5761055961033f565b5b610566868287016104f5565b935050602061057786828701610365565b925050604061058886828701610365565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105bd82610592565b9050919050565b6105cd816105b2565b82525050565b60006020820190506105e860008301846105c4565b92915050565b6000819050919050565b610601816105ee565b82525050565b600060208201905061061c60008301846105f8565b92915050565b61062b81610344565b82525050565b60006020820190506106466000830184610622565b92915050565b610655816103a7565b811461066057600080fd5b50565b6000815190506106728161064c565b92915050565b60006020828403121561068e5761068d61033a565b5b600061069c84828501610663565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106df826105ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610711576107106106a5565b5b60018201905091905056fea26469706673582212205557e30b6c669e4dbb8aa9db74ece6681034e9d115e2cf4554a0dd84c9a2cdd464736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063648f914c1461006757806371f898f3146100975780639d76ea58146100b3578063b5b47f42146100d1578063bf21a264146100ef578063fb286c651461010d575b600080fd5b610081600480360381019061007c919061037a565b61012b565b60405161008e91906103c2565b60405180910390f35b6100b160048036038101906100ac9190610523565b61014b565b005b6100bb6101f0565b6040516100c891906105d3565b60405180910390f35b6100d9610216565b6040516100e69190610607565b60405180910390f35b6100f761021c565b60405161010491906105d3565b60405180910390f35b610115610240565b6040516101229190610607565b60405180910390f35b60046020528060005260406000206000915054906101000a900460ff1681565b610153610246565b6004600083815260200190815260200160002060009054906101000a900460ff16156101b657816040517ffe80a91e0000000000000000000000000000000000000000000000000000000081526004016101ad9190610631565b60405180910390fd5b60016004600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506101eb836102d8565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102d657336040517f473751350000000000000000000000000000000000000000000000000000000081526004016102cd91906105d3565b60405180910390fd5b565b6000818060200190518101906102ee9190610678565b905080156103135760026000815480929190610309906106d4565b919050555061032c565b60036000815480929190610326906106d4565b91905055505b5050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61035781610344565b811461036257600080fd5b50565b6000813590506103748161034e565b92915050565b6000602082840312156103905761038f61033a565b5b600061039e84828501610365565b91505092915050565b60008115159050919050565b6103bc816103a7565b82525050565b60006020820190506103d760008301846103b3565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610430826103e7565b810181811067ffffffffffffffff8211171561044f5761044e6103f8565b5b80604052505050565b6000610462610330565b905061046e8282610427565b919050565b600067ffffffffffffffff82111561048e5761048d6103f8565b5b610497826103e7565b9050602081019050919050565b82818337600083830152505050565b60006104c66104c184610473565b610458565b9050828152602081018484840111156104e2576104e16103e2565b5b6104ed8482856104a4565b509392505050565b600082601f83011261050a576105096103dd565b5b813561051a8482602086016104b3565b91505092915050565b60008060006060848603121561053c5761053b61033a565b5b600084013567ffffffffffffffff81111561055a5761055961033f565b5b610566868287016104f5565b935050602061057786828701610365565b925050604061058886828701610365565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105bd82610592565b9050919050565b6105cd816105b2565b82525050565b60006020820190506105e860008301846105c4565b92915050565b6000819050919050565b610601816105ee565b82525050565b600060208201905061061c60008301846105f8565b92915050565b61062b81610344565b82525050565b60006020820190506106466000830184610622565b92915050565b610655816103a7565b811461066057600080fd5b50565b6000815190506106728161064c565b92915050565b60006020828403121561068e5761068d61033a565b5b600061069c84828501610663565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106df826105ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610711576107106106a5565b5b60018201905091905056fea26469706673582212205557e30b6c669e4dbb8aa9db74ece6681034e9d115e2cf4554a0dd84c9a2cdd464736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "handleRelay(bytes,bytes32,bytes32)": {
        "details": "ensure only trusted ProofVerifierRelayer are allowed to invoke this function",
        "params": {
          "data": "abi encoded data specific to business logic",
          "identityHash": "a proof that proves identity so that one identity is not used multiple times",
          "nullifierHash": "a proof that proves  membership so that one membership is not used multiple times"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "UnknownProofVerifier(address)": [
        {
          "notice": "Error when a call is made from not trusted ProofVerifierRelayer"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "handleRelay(bytes,bytes32,bytes32)": {
        "notice": "handles relay calls from ProofVerifierRelayer after proof verification"
      },
      "trustedProofVerifier()": {
        "notice": "address of trusted ProofVerifierRelayer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2901,
        "contract": "contracts/Testing/Voting.sol:Voting",
        "label": "trustedProofVerifier",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3117,
        "contract": "contracts/Testing/Voting.sol:Voting",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3119,
        "contract": "contracts/Testing/Voting.sol:Voting",
        "label": "yesVotes",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3121,
        "contract": "contracts/Testing/Voting.sol:Voting",
        "label": "noVotes",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3125,
        "contract": "contracts/Testing/Voting.sol:Voting",
        "label": "hashesVoted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}